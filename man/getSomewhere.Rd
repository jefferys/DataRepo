% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functionUtils.R
\name{getSomewhere}
\alias{getSomewhere}
\title{Get an exported object by name, possibly from unattached packages.}
\usage{
getSomewhere(x, ...)
}
\arguments{
\item{x}{An object name, as a string. May be qualified with a prefixed
\code{package::} identifier, in which case the object must be from that
package. Unexported objects will not be found; looking for \code{:::}
qualified objects is an error.}

\item{...}{Extra parameters (\code{pos, envir, mode, inherits}) to pass on to
\code{\link{get}}). These are ignored if \code{x} is a qualified name,
Other parameters will trigger an error, but only if \code{x} is an
unqualified name. Since \code{get} is called from within a wrapper function
in this package, these parameters will behave differently than if you
called \code{get} directly.}
}
\value{
The object named. It is an error if the object is not found.
}
\description{
A wrapper around \code{\link{get}} that allows using a qualified names like
\code{'SomePackage::myFunc'} to retrieve an object from a specific unattached
(but loaded) package. Qualified names are recognized, parsed and then
\code{\link{getFromNamespace}} is called instead of\code{get}.
}
\examples{
getSomewhere('ls')
#=> Returns base::ls, as base package is always loaded and attached.

try( getSomewhere('getAnywhere'))
#=> ERROR - utils::getAnywhere is not attached (it is loaded)
getSomewhere('utils::getAnywhere')
#=>

}

