% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validateFile.R
\name{validateFile}
\alias{validateFile}
\title{Validate files}
\usage{
validateFile(path, checksum = NULL, checksumFunc = tools::md5sum,
  fileSize = NULL)
}
\arguments{
\item{path}{The path to the file to check. Should exist and be a real file.
If not, failure will be reported.}

\item{checksum}{The checksum the expected file will have. May be \code{NULL}
and if so, file size will not be checked. If given the checksum of the file
specified will be calculated using checksumFUNC, by default using the md5
algorithm as provided by \code{tools::md5sum}.}

\item{checksumFunc}{The function object (not the string name) to use when
calculating the checksum of a file. Will be called with one parameter,
\code{path}. The value returned from this function call is tested against
the \code{checksum} parameters value. That value may not be \code{NULL} or
a missing value, but may be of any (atomic) vector type. When called, the
path has already been verified to exists on the file system as a real file
(not a directory or link). The function object passed may not be
\code{NULL} if a checksum is provided \code{NULL}, but is not used if the
checksum is \code{NULL}}

\item{fileSize}{The expected file of the size, in bytes. May be \code{NULL}
and if so, file size will not be checked. If a positive value, the size of
the file will be looked up on the file system and compared. If it does not
match then failure is reported and the checksum is not checked.}
}
\value{
A named character vector of test results. The names are the tests
  performed and the values are the results of those tests as a string. Empty
  strings indicate success, non-empty strings are failure messages indicating
  what went wrong. May contain NA's, which either mean something went wrong
  earlier so this test was not run, or that the test was selected not to be
  run

  Tests are:
  \itemize{
   \item{"checkParam_path" - Is the \code{path} parameter ok? }
   \item{""checkParam_checksum" - Is the \code{checksum} parameter ok? }
   \item{""checkParam_checksumFunc" - Is the \code{checksumFunc} parameter
   ok? }
   \item{""checkParam_fileSize" - Is the \code{fileSize} parameter ok? }
   \item{""checkParam_checksum_checksumFunc" - Is the combination of the
      \code{checksum} and \code{checksumFunc} parameters ok? }
   \item{""checkIsFile" - Is \code{path} an existing file system file object?
   }
   \item{""checkIsNotLink" - Is \code{path} a real file system object (not a
   link)? Should always succeed on systems that don't support links, when
   checkIsFile passed. }
   \item{"checkFileSizeMatches" - Validate that the size of \code{path} in
   bytes matches that provided as \code{fileSize}. }
   \item{"checkChecksumMatches" - Validate that the checksum of \code{path}
   as calculated by the function object provided as \code{checksumFunc}
   matches that provided as \code{checksum}. The default is to check md5
   sums. }
}
}
\description{
Applies several checks to validate a file. Outputs a named character vector
of strings giving the results of the checks, where the names are the tests
and the value is the check result. Empty string are reported for checks that
succeed and error message for checks that fail. Missing values
\code{NA_character_} are reported when a test id not performed. This means
either a test was not supposed to run, or that a previous test failed.
Generally, the first failing test causes the result vector to be returned
with all following check results reported as missing.
}
\examples{
# Setup for examples
noSuchFile  <- tempfile( 'noSuchFile'  )
emptyFile <- tempfile( 'emptyFile' )
md5EmptyFile <- 'd41d8cd98f00b204e9800998ecf8427e'
file.create( emptyFile )
binFile <- tempfile( 'binFile', fileext= '.bin' )
writeBin( as.raw(c(1,2,3)), binFile)

check <- validateFile( emptyFile, fileSize= 0, checksum= md5EmptyFile )
names(check)
#=> [1] "checkParam_path"                   "checkParam_checksum"
#=> [3] "checkParam_checksumFunc"           "checkParam_fileSize"
#=> [5] "checkParam_checksum_checksumFunc"          "checkIsFile"
#=> [7] "checkIsNotLink"                   "checkFileSizeMatches"
#=> [9] "checkChecksumMatches"
check['checkFileSizeMatches']
#=> checkFileSizeMatches
#=>                   ""
# Remove names to make things simple
names(check) <- NULL
check
#=> [1] "" "" "" "" "" "" "" "" ""

# Not checking file contents
check <- validateFile( emptyFile, fileSize= NULL, checksum= NULL )
names(check) <- NULL
#=> [1] "" "" "" "" "" "" "" NA NA

# Bad checksum
check <- validateFile( emptyFile, fileSize= 0, checksum= 'abc123' )
names(check) <- NULL
#=> [1] "" "" "" "" "" "" "" ""
#=> [9] "Checksum mismatch. Found d41d8cd98f00b204e9800998ecf8427e wanted abc123.

# Bad file size. No need to check the checksum if file size doesn't match
check <- validateFile( emptyFile, fileSize= 1, checksum= 'BAD' )
names(check) <- NULL
#=> [1] "" "" "" "" "" "" ""
#=> [8] "File size mismatch. Found 0 wanted 1."
#=> [9] NA

# Bad file path, no need to check anything else.
check <- validateFile( noSuchFile, fileSize= 0, checksum= md5EmptyFile )
names(check) <- NULL
#=> [1] ""  ""  ""  ""  ""  "No such path."
#=> [7] NA  NA  NA

# Using your own checksum function object
SumIt <- function (path) { sum( as.numeric(
    readBin( path, what = 'raw', n= file.info(path)[['size']] + 1 )
))}
check <- validateFile( binFile, fileSize= 3, checksum= 6, checksumFunc= SumIt )
names(check) <- NULL
check
#=> [1] "" "" "" "" "" "" "" "" ""

# Cleanup
file.remove( emptyFile )
file.remove( binFile )
}

